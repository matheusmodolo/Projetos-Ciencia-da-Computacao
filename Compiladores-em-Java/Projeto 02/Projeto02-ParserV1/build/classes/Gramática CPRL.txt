// Structural Grammar
program = declarativePart statementPart "." .
declarativePart = initialDecls subprogramDecls .
initialDecls = ( initialDecl )* .
initialDecl = constDecl | arrayTypeDecl | varDecl .
constDecl = "const" constId ":=" literal ";" .
literal = intLiteral | charLiteral | stringLiteral | booleanLiteral .
booleanLiteral = "true" | "false" .
arrayTypeDecl = "type" typeId "=" "array" "[" intConstValue "]" "of" typeName ";" .
varDecl = "var" identifiers ":" typeName ";" .
identifiers = identifier ( "," identifier )* .
typeName = "Integer" | "Boolean" | "Char" | typeId .
subprogramDecls = ( subprogramDecl )* .
subprogramDecl = procedureDecl | functionDecl .
procedureDecl = "procedure" procId ( formalParameters )? "is" initialDecls statementPart procId ";" .
functionDecl = "function" funcId ( formalParameters )? "return" typeName "is" initialDecls statementPart funcId ";" .
formalParameters = "(" parameterDecl ( "," parameterDecl )* ")" .
parameterDecl = ( "var" )? paramId ":" typeName .
statementPart = "begin" statements "end" .
statements = ( statement )* .
statement = assignmentStmt | ifStmt | loopStmt | exitStmt | readStmt
            | writeStmt | writelnStmt | procedureCallStmt | returnStmt .
assignmentStmt = variable ":=" expression ";" .
variable = ( varId | paramId) ( "[" expression "]" )* .
ifStmt = "if" booleanExpr "then" statements ( "elsif" booleanExpr "then" statements )* ( "else" statements )? "end" "if" ";" .
loopStmt = ( "while" booleanExpr )? "loop" statements "end" "loop" ";" .
exitStmt = "exit" ( "when" booleanExpr )? ";" .
readStmt = "read" variable ";" .
writeStmt = "write" expressions ";" .
expressions = expression ( "," expression )* .
writelnStmt = "writeln" ( expressions )? ";" .
procedureCallStmt = procId ( actualParameters )? ";" .
actualParameters = "(" expressions ")" .
returnStmt = "return" ( expression )? ";" .
expression = relation ( logicalOp relation )* .
logicalOp = "and" | "or" .
relation = simpleExpr ( relationalOp simpleExpr )? .
relationalOp = "=" | "!=" | "<" | "<=" | ">" | ">=" .
simpleExpr = ( addingOp )? term ( addingOp term )* .
addingOp = "+" | "-" .
term = factor ( multiplyingOp factor )* .
multiplyingOp = "*" | "/" | "mod" .
factor = "not" factor | constValue | namedValue | functionCall | "(" expression ")" .
constValue = literal | constId .
namedValue = variable .
functionCall = funcId ( actualParameters )? .
booleanExpr = expression .
intConstValue = constValue .
constId = identifier .
varId = identifier .
paramId = identifier .
typeId = identifier .
procId = identifier .
funcId = identifier .

// Lexical Grammar
identifier = letter ( letter | digit)* .
intLiteral = ( digit )+ .
charLiteral = "'" charLiteralElement | escapedChar "'" .
stringLiteral = "\"" ( stringLiteralElement | escapedChar )* "\"" .

letter = [A-Za-z] .
digit = [0-9] .
graphicChar = [\u0020-\u007E\u00A0-\uFFFF] .
escapedChar = "\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") .
charLiteralElement = [\u0020-\u0026\i0028-\u005B\u005D-\u007E\u00A0-\uFFFF] .
stringLiteralElement = [\u0020\u0021\u0023-\u005B\u005D-\u007E\u00A0-\uFFFF] .